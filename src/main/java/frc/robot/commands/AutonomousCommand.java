// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import frc.robot.subsystems.*;

// This should be fine not being an InstantCommand because it will be 
public class AutonomousCommand extends SequentialCommandGroup {

    private final CoralChute m_coralChute;
    private final Elevator m_elevator;
    private final DriveSubsystem m_driveSubsystem;

    public AutonomousCommand(CoralChute coralChute, Elevator elevator, DriveSubsystem driveSubsystem, Integer key) {
        m_coralChute = coralChute;
        m_elevator = elevator;
        m_driveSubsystem = driveSubsystem;

        addRequirements(m_coralChute, m_elevator, m_driveSubsystem);

        addCommands(
            new TankDrive(() -> -0.5, () -> -0.5, m_driveSubsystem).until(() -> m_driveSubsystem.getFrontLeftPos() < -4000).withTimeout(7).andThen(
            new AdvanceCoral(m_coralChute, true).withTimeout(3))
        );
    }

    public AutonomousCommand(CoralChute coralChute, Elevator elevator, DriveSubsystem driveSubsystem) {
        this(coralChute, elevator, driveSubsystem, 0);
    }

    // Called when the command is initially scheduled.
    // @Override
    // public void initialize() {
    // }

    // // Called every time the scheduler runs while the command is scheduled.
    // @Override
    // public void execute() {
        
    // }

    // // Called once the command ends or is interrupted.
    // @Override
    // public void end(boolean interrupted) {
    // }

    // // Returns true when the command should end.
    // @Override
    // public boolean isFinished() {
    //     return false;
    // }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}
