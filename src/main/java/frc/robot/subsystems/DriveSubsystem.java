// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import com.revrobotics.spark.SparkMax;
import com.revrobotics.spark.SparkBase.PersistMode;
import com.revrobotics.spark.SparkBase.ResetMode;
import com.revrobotics.spark.SparkLowLevel.MotorType;
import com.revrobotics.spark.config.SparkMaxConfig;;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class DriveSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private SparkMax frontLeftMotor;
    private SparkMax frontRightMotor;
    private DifferentialDrive differentialDriveFront;
    private SparkMax backLeftMotor;
    private SparkMax backRightMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public DriveSubsystem() {

        // TODO - Inverting Drive Subsystem motors
        SparkMaxConfig notInvertedConfig = new SparkMaxConfig();
        notInvertedConfig.inverted(false);
        SparkMaxConfig invertedConfig = new SparkMaxConfig();
        invertedConfig.inverted(true);
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        frontLeftMotor = new SparkMax(2, MotorType.kBrushless);
        frontLeftMotor.configure(notInvertedConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

        SparkMaxConfig notInvertedFollowFrontLeftConfig = new SparkMaxConfig();
        notInvertedFollowFrontLeftConfig.inverted(false);
        notInvertedFollowFrontLeftConfig.follow(frontLeftMotor);

        frontRightMotor = new SparkMax(3, MotorType.kBrushless);
        frontRightMotor.configure(notInvertedConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

        SparkMaxConfig notInvertedFollowFrontRightConfig = new SparkMaxConfig();
        notInvertedFollowFrontRightConfig.inverted(false);
        notInvertedFollowFrontRightConfig.follow(frontRightMotor);

        differentialDriveFront = new DifferentialDrive(frontLeftMotor, frontRightMotor);
        addChild("Differential Drive Front", differentialDriveFront);
        differentialDriveFront.setSafetyEnabled(true);
        differentialDriveFront.setExpiration(0.1);
        differentialDriveFront.setMaxOutput(1.0);

        // Back motors follow front now, although configs are messy

        backLeftMotor = new SparkMax(1, MotorType.kBrushless);
        backLeftMotor.configure(notInvertedFollowFrontLeftConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);


        backRightMotor = new SparkMax(4, MotorType.kBrushless);
        backRightMotor.configure(notInvertedFollowFrontRightConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setLeftMotor(double speed) {
        frontLeftMotor.set(speed);
    }

    public void setRightMotor(double speed) {
        frontRightMotor.set(speed);
    }

    public void stop() {
        frontLeftMotor.stopMotor();
        frontRightMotor.stopMotor();
    }
}
