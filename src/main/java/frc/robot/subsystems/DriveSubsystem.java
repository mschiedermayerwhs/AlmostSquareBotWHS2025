package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;
//static import reduces verbosity of adding constants without this you would need to Write Constants.DriveConstants.kFrontLeftDrivePort
import static frc.robot.Constants.DriveConstants.*;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import com.revrobotics.spark.SparkMax;
import com.revrobotics.spark.SparkBase.PersistMode;
import com.revrobotics.spark.SparkBase.ResetMode;
import com.revrobotics.spark.SparkLowLevel.MotorType;
import com.revrobotics.spark.config.SparkMaxConfig;


/**
 *
 */
public class DriveSubsystem extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private SparkMax frontLeftMotor;
    private SparkMax frontRightMotor;   
    private SparkMax backLeftMotor;
    private SparkMax backRightMotor;
    private DifferentialDrive m_differentialDrive;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    /**
    *
    */
    public DriveSubsystem() {
        SparkMaxConfig notInvertedConfig = new SparkMaxConfig();
        notInvertedConfig.inverted(false);

        SparkMaxConfig invertedConfig = new SparkMaxConfig();
        notInvertedConfig.inverted(true);

        frontLeftMotor = new SparkMax(kFrontLeftDrivePort, MotorType.kBrushless);
        frontLeftMotor.configure(notInvertedConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);
 
        SparkMaxConfig notInvertedFollowFrontLeftConfig = new SparkMaxConfig();
        notInvertedFollowFrontLeftConfig.inverted(false);
        notInvertedFollowFrontLeftConfig.follow(frontLeftMotor);

        frontRightMotor = new SparkMax(kFrontRightDrivePort, MotorType.kBrushless);
        frontRightMotor.configure(invertedConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

        backLeftMotor = new SparkMax(kBackLeftDrivePort, MotorType.kBrushless);
        backLeftMotor.configure(notInvertedFollowFrontLeftConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);
          
        SparkMaxConfig invertedFollowFrontRightConfig = new SparkMaxConfig();
        invertedFollowFrontRightConfig.inverted(true);
        invertedFollowFrontRightConfig.follow(frontRightMotor);

        backRightMotor = new SparkMax(kBackRigthDrivePort, MotorType.kBrushless);
        backRightMotor.configure(invertedFollowFrontRightConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);
 
        m_differentialDrive = new DifferentialDrive(frontLeftMotor, frontRightMotor);
    }

    public void tankDrive(double leftSpeed, double rightSpeed) {
        m_differentialDrive.tankDrive(leftSpeed, rightSpeed, true);
        //System.out.println("tank driving: " + leftSpeed + ", " + rightSpeed);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation
    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void setLeftMotor(double speed) {
        frontLeftMotor.set(speed);
    }

    public void setRightMotor(double speed) {
        frontRightMotor.set(speed);
    }

    public void stop() {
        frontLeftMotor.stopMotor();
        frontRightMotor.stopMotor();
    }
}
