// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.wpilibj2.command.SubsystemBase;

import com.revrobotics.spark.SparkMax;
import com.revrobotics.RelativeEncoder;
import com.revrobotics.spark.SparkBase.ResetMode;
import com.revrobotics.spark.SparkBase.PersistMode;
import com.revrobotics.spark.SparkLowLevel.MotorType;
import com.revrobotics.spark.config.SparkMaxConfig;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Elevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private SparkMax leadElevatorMotor;
private SparkMax followerElevatorMotor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    RelativeEncoder leadMotorEnc;
    RelativeEncoder followerMotorEnc;
    
    /**
    *
    */
    public Elevator() {
        SparkMaxConfig notInvertedConfig = new SparkMaxConfig();
        notInvertedConfig.inverted(false);
        SparkMaxConfig invertedConfig = new SparkMaxConfig();
        invertedConfig.inverted(true);

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // leadElevatorMotor = new SparkMax(4, MotorType.kBrushless);
        // leadElevatorMotor.configure(notInvertedConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

        // invertedConfig.follow(4); // substitute above motor ID, change configs used as necessary

        // followerElevatorMotor = new SparkMax(5, MotorType.kBrushless);
        // followerElevatorMotor.configure(notInvertedConfig, ResetMode.kResetSafeParameters, PersistMode.kPersistParameters);

        // leadMotorEnc = leadElevatorMotor.getEncoder();
        // followerMotorEnc = followerElevatorMotor.getEncoder();


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    // One speed for two motors moving in tandem
    public void setElevatorMotor(double speed) {
        //leadElevatorMotor.set(speed); // the other motor should follow
    }

    public RelativeEncoder getLeadEncoder() {
        return leadMotorEnc;
    }

    public RelativeEncoder getFollowerEncoder() {
        return followerMotorEnc;
    }

    public double getLeadPosition() {
        return getLeadEncoder().getPosition();
    }

    public double getFollowerPosition() {
        return getFollowerEncoder().getPosition();
    }

    public double getLeadVelocity() {
        return getLeadEncoder().getVelocity();
    }

    public double getFollowerVelocity() {
        return getFollowerEncoder().getVelocity();
    }
}

